# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'ui_form.ui'
##
## Created by: Qt User Interface Compiler version 6.3.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox, QComboBox,
    QFrame, QGroupBox, QLabel, QLineEdit,
    QListWidget, QListWidgetItem, QMainWindow, QMenu,
    QMenuBar, QPushButton, QSizePolicy, QSpinBox,
    QTabWidget, QWidget)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(780, 650)
        MainWindow.setMinimumSize(QSize(780, 640))
        self.actionEnglish = QAction(MainWindow)
        self.actionEnglish.setObjectName(u"actionEnglish")
        self.actionfran_ais = QAction(MainWindow)
        self.actionfran_ais.setObjectName(u"actionfran_ais")
        self.action = QAction(MainWindow)
        self.action.setObjectName(u"action")
        self.actionLight = QAction(MainWindow)
        self.actionLight.setObjectName(u"actionLight")
        self.actionDark = QAction(MainWindow)
        self.actionDark.setObjectName(u"actionDark")
        self.actionChangelog = QAction(MainWindow)
        self.actionChangelog.setObjectName(u"actionChangelog")
        self.actionHelp = QAction(MainWindow)
        self.actionHelp.setObjectName(u"actionHelp")
        self.actionKnown_Issues = QAction(MainWindow)
        self.actionKnown_Issues.setObjectName(u"actionKnown_Issues")
        self.actionUpdate = QAction(MainWindow)
        self.actionUpdate.setObjectName(u"actionUpdate")
        self.actionExport = QAction(MainWindow)
        self.actionExport.setObjectName(u"actionExport")
        self.actionHelpful_Tips = QAction(MainWindow)
        self.actionHelpful_Tips.setObjectName(u"actionHelpful_Tips")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.tabWidget = QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName(u"tabWidget")
        self.tabWidget.setGeometry(QRect(10, 10, 760, 501))
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        font = QFont()
        font.setPointSize(9)
        self.tabWidget.setFont(font)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setTabPosition(QTabWidget.North)
        self.tabWidget.setTabShape(QTabWidget.Rounded)
        self.tab = QWidget()
        self.tab.setObjectName(u"tab")
        self.tab.setAutoFillBackground(False)
        self.browseButton1 = QPushButton(self.tab)
        self.browseButton1.setObjectName(u"browseButton1")
        self.browseButton1.setGeometry(QRect(670, 5, 75, 23))
        sizePolicy1 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.browseButton1.sizePolicy().hasHeightForWidth())
        self.browseButton1.setSizePolicy(sizePolicy1)
        font1 = QFont()
        font1.setPointSize(9)
        font1.setBold(False)
        self.browseButton1.setFont(font1)
        self.browseButton1.setAutoFillBackground(False)
        self.browseButton1.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.browseButton1.setFlat(False)
        self.lineEdit = QLineEdit(self.tab)
        self.lineEdit.setObjectName(u"lineEdit")
        self.lineEdit.setGeometry(QRect(100, 5, 561, 23))
        self.lineEdit.setFont(font1)
        self.lineEdit.setReadOnly(True)
        self.label = QLabel(self.tab)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(10, 5, 81, 23))
        sizePolicy2 = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy2)
        self.label.setMinimumSize(QSize(75, 23))
        self.label.setFont(font1)
        self.label.setFrameShape(QFrame.NoFrame)
        self.label.setFrameShadow(QFrame.Plain)
        self.label.setTextFormat(Qt.PlainText)
        self.label.setAlignment(Qt.AlignJustify|Qt.AlignVCenter)
        self.label.setWordWrap(False)
        self.label_2 = QLabel(self.tab)
        self.label_2.setObjectName(u"label_2")
        self.label_2.setGeometry(QRect(10, 35, 81, 23))
        sizePolicy2.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy2)
        self.label_2.setMinimumSize(QSize(75, 23))
        self.label_2.setFont(font1)
        self.label_2.setFrameShape(QFrame.NoFrame)
        self.label_2.setFrameShadow(QFrame.Plain)
        self.label_2.setTextFormat(Qt.PlainText)
        self.label_2.setAlignment(Qt.AlignJustify|Qt.AlignVCenter)
        self.label_2.setWordWrap(False)
        self.lineEdit_2 = QLineEdit(self.tab)
        self.lineEdit_2.setObjectName(u"lineEdit_2")
        self.lineEdit_2.setGeometry(QRect(100, 35, 561, 23))
        self.lineEdit_2.setFont(font1)
        self.lineEdit_2.setReadOnly(True)
        self.browseButton2 = QPushButton(self.tab)
        self.browseButton2.setObjectName(u"browseButton2")
        self.browseButton2.setGeometry(QRect(670, 35, 75, 23))
        sizePolicy1.setHeightForWidth(self.browseButton2.sizePolicy().hasHeightForWidth())
        self.browseButton2.setSizePolicy(sizePolicy1)
        self.browseButton2.setFont(font1)
        self.browseButton2.setAutoFillBackground(False)
        self.browseButton2.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.browseButton2.setFlat(False)
        self.lineEdit_3 = QLineEdit(self.tab)
        self.lineEdit_3.setObjectName(u"lineEdit_3")
        self.lineEdit_3.setGeometry(QRect(100, 65, 561, 23))
        self.lineEdit_3.setFont(font1)
        self.seedButton = QPushButton(self.tab)
        self.seedButton.setObjectName(u"seedButton")
        self.seedButton.setGeometry(QRect(670, 65, 75, 23))
        sizePolicy1.setHeightForWidth(self.seedButton.sizePolicy().hasHeightForWidth())
        self.seedButton.setSizePolicy(sizePolicy1)
        self.seedButton.setFont(font1)
        self.seedButton.setAutoFillBackground(False)
        self.seedButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.seedButton.setFlat(False)
        self.label_3 = QLabel(self.tab)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setGeometry(QRect(10, 65, 81, 23))
        sizePolicy2.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy2)
        self.label_3.setMinimumSize(QSize(75, 23))
        self.label_3.setFont(font1)
        self.label_3.setFrameShape(QFrame.NoFrame)
        self.label_3.setFrameShadow(QFrame.Plain)
        self.label_3.setTextFormat(Qt.PlainText)
        self.label_3.setAlignment(Qt.AlignJustify|Qt.AlignVCenter)
        self.label_3.setWordWrap(False)
        self.tabWidget_2 = QTabWidget(self.tab)
        self.tabWidget_2.setObjectName(u"tabWidget_2")
        self.tabWidget_2.setGeometry(QRect(10, 104, 731, 365))
        self.tab_4 = QWidget()
        self.tab_4.setObjectName(u"tab_4")
        self.groupBox = QGroupBox(self.tab_4)
        self.groupBox.setObjectName(u"groupBox")
        self.groupBox.setGeometry(QRect(10, 14, 521, 141))
        self.groupBox.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.chestsCheck = QCheckBox(self.groupBox)
        self.chestsCheck.setObjectName(u"chestsCheck")
        self.chestsCheck.setGeometry(QRect(10, 24, 151, 21))
        self.giftsCheck = QCheckBox(self.groupBox)
        self.giftsCheck.setObjectName(u"giftsCheck")
        self.giftsCheck.setGeometry(QRect(189, 24, 151, 21))
        self.tradeGiftsCheck = QCheckBox(self.groupBox)
        self.tradeGiftsCheck.setObjectName(u"tradeGiftsCheck")
        self.tradeGiftsCheck.setEnabled(True)
        self.tradeGiftsCheck.setGeometry(QRect(369, 24, 141, 21))
        font2 = QFont()
        font2.setPointSize(9)
        font2.setStrikeOut(False)
        self.tradeGiftsCheck.setFont(font2)
        self.tradeGiftsCheck.setCheckable(True)
        self.seashellsCheck = QCheckBox(self.groupBox)
        self.seashellsCheck.setObjectName(u"seashellsCheck")
        self.seashellsCheck.setEnabled(True)
        self.seashellsCheck.setGeometry(QRect(369, 64, 141, 21))
        font3 = QFont()
        font3.setPointSize(9)
        font3.setStrikeOut(True)
        self.seashellsCheck.setFont(font3)
        self.seashellsCheck.setStyleSheet(u"color: rgb(80, 80, 80);")
        self.seashellsCheck.setCheckable(False)
        self.shopCheck = QCheckBox(self.groupBox)
        self.shopCheck.setObjectName(u"shopCheck")
        self.shopCheck.setEnabled(True)
        self.shopCheck.setGeometry(QRect(369, 104, 141, 21))
        self.shopCheck.setFont(font3)
        self.shopCheck.setStyleSheet(u"color: rgb(80, 80, 80);")
        self.shopCheck.setCheckable(False)
        self.leavesCheck = QCheckBox(self.groupBox)
        self.leavesCheck.setObjectName(u"leavesCheck")
        self.leavesCheck.setGeometry(QRect(10, 64, 151, 21))
        self.miscellaneousCheck = QCheckBox(self.groupBox)
        self.miscellaneousCheck.setObjectName(u"miscellaneousCheck")
        self.miscellaneousCheck.setGeometry(QRect(10, 104, 151, 21))
        self.heartsCheck = QCheckBox(self.groupBox)
        self.heartsCheck.setObjectName(u"heartsCheck")
        self.heartsCheck.setEnabled(True)
        self.heartsCheck.setGeometry(QRect(189, 64, 151, 21))
        self.heartsCheck.setFont(font2)
        self.heartsCheck.setCheckable(True)
        self.seashellsComboBox = QComboBox(self.groupBox)
        self.seashellsComboBox.addItem("")
        self.seashellsComboBox.addItem("")
        self.seashellsComboBox.addItem("")
        self.seashellsComboBox.addItem("")
        self.seashellsComboBox.addItem("")
        self.seashellsComboBox.addItem("")
        self.seashellsComboBox.setObjectName(u"seashellsComboBox")
        self.seashellsComboBox.setGeometry(QRect(189, 104, 161, 22))
        self.seashellsComboBox.setEditable(False)
        self.groupBox_2 = QGroupBox(self.tab_4)
        self.groupBox_2.setObjectName(u"groupBox_2")
        self.groupBox_2.setGeometry(QRect(360, 169, 361, 141))
        self.groupBox_2.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.instrumentCheck = QCheckBox(self.groupBox_2)
        self.instrumentCheck.setObjectName(u"instrumentCheck")
        self.instrumentCheck.setEnabled(True)
        self.instrumentCheck.setGeometry(QRect(10, 104, 151, 21))
        self.instrumentCheck.setFont(font2)
        self.instrumentCheck.setCheckable(True)
        self.bossCheck = QCheckBox(self.groupBox_2)
        self.bossCheck.setObjectName(u"bossCheck")
        self.bossCheck.setGeometry(QRect(10, 64, 151, 21))
        self.rupCheck = QCheckBox(self.groupBox_2)
        self.rupCheck.setObjectName(u"rupCheck")
        self.rupCheck.setGeometry(QRect(10, 24, 151, 21))
        self.owlsComboBox = QComboBox(self.groupBox_2)
        self.owlsComboBox.addItem("")
        self.owlsComboBox.addItem("")
        self.owlsComboBox.addItem("")
        self.owlsComboBox.addItem("")
        self.owlsComboBox.setObjectName(u"owlsComboBox")
        self.owlsComboBox.setGeometry(QRect(189, 64, 161, 22))
        self.itemsComboBox = QComboBox(self.groupBox_2)
        self.itemsComboBox.addItem("")
        self.itemsComboBox.addItem("")
        self.itemsComboBox.addItem("")
        self.itemsComboBox.setObjectName(u"itemsComboBox")
        self.itemsComboBox.setEnabled(False)
        self.itemsComboBox.setGeometry(QRect(189, 24, 161, 22))
        self.groupBox_3 = QGroupBox(self.tab_4)
        self.groupBox_3.setObjectName(u"groupBox_3")
        self.groupBox_3.setGeometry(QRect(10, 169, 341, 101))
        self.groupBox_3.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.dampeCheck = QCheckBox(self.groupBox_3)
        self.dampeCheck.setObjectName(u"dampeCheck")
        self.dampeCheck.setGeometry(QRect(10, 24, 151, 21))
        self.dampeCheck.setFont(font2)
        self.dampeCheck.setCheckable(True)
        self.fishingCheck = QCheckBox(self.groupBox_3)
        self.fishingCheck.setObjectName(u"fishingCheck")
        self.fishingCheck.setGeometry(QRect(10, 64, 151, 21))
        self.rapidsCheck = QCheckBox(self.groupBox_3)
        self.rapidsCheck.setObjectName(u"rapidsCheck")
        self.rapidsCheck.setGeometry(QRect(189, 24, 141, 21))
        self.trendyCheck = QCheckBox(self.groupBox_3)
        self.trendyCheck.setObjectName(u"trendyCheck")
        self.trendyCheck.setEnabled(True)
        self.trendyCheck.setGeometry(QRect(189, 64, 141, 21))
        self.trendyCheck.setFont(font3)
        self.trendyCheck.setStyleSheet(u"color: rgb(80, 80, 80);")
        self.trendyCheck.setCheckable(False)
        self.groupBox_4 = QGroupBox(self.tab_4)
        self.groupBox_4.setObjectName(u"groupBox_4")
        self.groupBox_4.setGeometry(QRect(540, 14, 181, 101))
        self.groupBox_4.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.spoilerCheck = QCheckBox(self.groupBox_4)
        self.spoilerCheck.setObjectName(u"spoilerCheck")
        self.spoilerCheck.setGeometry(QRect(10, 24, 151, 21))
        self.spoilerCheck.setCheckable(True)
        self.platformComboBox = QComboBox(self.groupBox_4)
        self.platformComboBox.addItem("")
        self.platformComboBox.addItem("")
        self.platformComboBox.setObjectName(u"platformComboBox")
        self.platformComboBox.setGeometry(QRect(10, 64, 161, 22))
        self.platformComboBox.setEditable(False)
        self.tabWidget_2.addTab(self.tab_4, "")
        self.tab_5 = QWidget()
        self.tab_5.setObjectName(u"tab_5")
        self.groupBox_6 = QGroupBox(self.tab_5)
        self.groupBox_6.setObjectName(u"groupBox_6")
        self.groupBox_6.setGeometry(QRect(10, 14, 171, 141))
        self.groupBox_6.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.enemyCheck = QCheckBox(self.groupBox_6)
        self.enemyCheck.setObjectName(u"enemyCheck")
        self.enemyCheck.setEnabled(True)
        self.enemyCheck.setGeometry(QRect(10, 24, 151, 21))
        self.enemyCheck.setFont(font2)
        self.enemyCheck.setCheckable(True)
        self.enemySizesCheck = QCheckBox(self.groupBox_6)
        self.enemySizesCheck.setObjectName(u"enemySizesCheck")
        self.enemySizesCheck.setEnabled(True)
        self.enemySizesCheck.setGeometry(QRect(10, 64, 161, 21))
        self.enemySizesCheck.setFont(font2)
        self.enemySizesCheck.setCheckable(True)
        self.chestAspectComboBox = QComboBox(self.groupBox_6)
        self.chestAspectComboBox.addItem("")
        self.chestAspectComboBox.addItem("")
        self.chestAspectComboBox.addItem("")
        self.chestAspectComboBox.setObjectName(u"chestAspectComboBox")
        self.chestAspectComboBox.setGeometry(QRect(10, 104, 150, 22))
        self.chestAspectComboBox.setEditable(False)
        self.groupBox_5 = QGroupBox(self.tab_5)
        self.groupBox_5.setObjectName(u"groupBox_5")
        self.groupBox_5.setGeometry(QRect(10, 169, 521, 141))
        self.groupBox_5.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.badPetsCheck = QCheckBox(self.groupBox_5)
        self.badPetsCheck.setObjectName(u"badPetsCheck")
        self.badPetsCheck.setGeometry(QRect(10, 24, 151, 21))
        self.badPetsCheck.setFont(font2)
        self.badPetsCheck.setCheckable(True)
        self.unlockedBombsCheck = QCheckBox(self.groupBox_5)
        self.unlockedBombsCheck.setObjectName(u"unlockedBombsCheck")
        self.unlockedBombsCheck.setGeometry(QRect(369, 24, 141, 21))
        self.shuffledBombsCheck = QCheckBox(self.groupBox_5)
        self.shuffledBombsCheck.setObjectName(u"shuffledBombsCheck")
        self.shuffledBombsCheck.setGeometry(QRect(369, 64, 141, 21))
        self.shuffledPowderCheck = QCheckBox(self.groupBox_5)
        self.shuffledPowderCheck.setObjectName(u"shuffledPowderCheck")
        self.shuffledPowderCheck.setGeometry(QRect(369, 104, 141, 21))
        self.fastFishingCheck = QCheckBox(self.groupBox_5)
        self.fastFishingCheck.setObjectName(u"fastFishingCheck")
        self.fastFishingCheck.setGeometry(QRect(189, 24, 151, 21))
        self.stalfosCheck = QCheckBox(self.groupBox_5)
        self.stalfosCheck.setObjectName(u"stalfosCheck")
        self.stalfosCheck.setEnabled(True)
        self.stalfosCheck.setGeometry(QRect(189, 64, 151, 21))
        self.stalfosCheck.setFont(font2)
        self.stalfosCheck.setCheckable(True)
        self.bookCheck = QCheckBox(self.groupBox_5)
        self.bookCheck.setObjectName(u"bookCheck")
        self.bookCheck.setGeometry(QRect(10, 64, 151, 21))
        self.groupBox_9 = QGroupBox(self.tab_5)
        self.groupBox_9.setObjectName(u"groupBox_9")
        self.groupBox_9.setGeometry(QRect(190, 14, 531, 141))
        self.groupBox_9.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.kanaletCheck = QCheckBox(self.groupBox_9)
        self.kanaletCheck.setObjectName(u"kanaletCheck")
        self.kanaletCheck.setGeometry(QRect(10, 24, 151, 21))
        self.openMabeCheck = QCheckBox(self.groupBox_9)
        self.openMabeCheck.setObjectName(u"openMabeCheck")
        self.openMabeCheck.setEnabled(True)
        self.openMabeCheck.setGeometry(QRect(10, 64, 151, 21))
        self.openMabeCheck.setFont(font2)
        self.openMabeCheck.setCheckable(True)
        self.mazeCheck = QCheckBox(self.groupBox_9)
        self.mazeCheck.setObjectName(u"mazeCheck")
        self.mazeCheck.setGeometry(QRect(10, 104, 151, 21))
        self.mazeCheck.setFont(font2)
        self.mazeCheck.setCheckable(True)
        self.bridgeCheck = QCheckBox(self.groupBox_9)
        self.bridgeCheck.setObjectName(u"bridgeCheck")
        self.bridgeCheck.setGeometry(QRect(189, 24, 141, 21))
        self.swampCheck = QCheckBox(self.groupBox_9)
        self.swampCheck.setObjectName(u"swampCheck")
        self.swampCheck.setGeometry(QRect(189, 64, 141, 21))
        self.swampCheck.setFont(font2)
        self.swampCheck.setCheckable(True)
        self.extendedConsumableCheck = QCheckBox(self.groupBox_9)
        self.extendedConsumableCheck.setObjectName(u"extendedConsumableCheck")
        self.extendedConsumableCheck.setGeometry(QRect(369, 24, 151, 21))
        self.extendedConsumableCheck.setCheckable(True)
        self.dungeonsCheck = QCheckBox(self.groupBox_9)
        self.dungeonsCheck.setObjectName(u"dungeonsCheck")
        self.dungeonsCheck.setEnabled(True)
        self.dungeonsCheck.setGeometry(QRect(189, 104, 141, 21))
        self.dungeonsCheck.setFont(font2)
        self.dungeonsCheck.setCheckable(True)
        self.tabWidget_2.addTab(self.tab_5, "")
        self.tab_7 = QWidget()
        self.tab_7.setObjectName(u"tab_7")
        self.groupBox_8 = QGroupBox(self.tab_7)
        self.groupBox_8.setObjectName(u"groupBox_8")
        self.groupBox_8.setGeometry(QRect(200, 14, 171, 141))
        self.groupBox_8.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.lv1BeamCheck = QCheckBox(self.groupBox_8)
        self.lv1BeamCheck.setObjectName(u"lv1BeamCheck")
        self.lv1BeamCheck.setGeometry(QRect(10, 104, 151, 21))
        self.niceRodCheck = QCheckBox(self.groupBox_8)
        self.niceRodCheck.setObjectName(u"niceRodCheck")
        self.niceRodCheck.setGeometry(QRect(10, 64, 151, 21))
        self.niceBombsCheck = QCheckBox(self.groupBox_8)
        self.niceBombsCheck.setObjectName(u"niceBombsCheck")
        self.niceBombsCheck.setGeometry(QRect(10, 24, 151, 21))
        self.groupBox_7 = QGroupBox(self.tab_7)
        self.groupBox_7.setObjectName(u"groupBox_7")
        self.groupBox_7.setGeometry(QRect(10, 170, 181, 101))
        self.groupBox_7.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.trapsComboBox = QComboBox(self.groupBox_7)
        self.trapsComboBox.addItem("")
        self.trapsComboBox.addItem("")
        self.trapsComboBox.addItem("")
        self.trapsComboBox.addItem("")
        self.trapsComboBox.addItem("")
        self.trapsComboBox.setObjectName(u"trapsComboBox")
        self.trapsComboBox.setGeometry(QRect(10, 64, 161, 22))
        self.trapsComboBox.setEditable(False)
        self.poolComboBox = QComboBox(self.groupBox_7)
        self.poolComboBox.addItem("")
        self.poolComboBox.addItem("")
        self.poolComboBox.addItem("")
        self.poolComboBox.setObjectName(u"poolComboBox")
        self.poolComboBox.setEnabled(False)
        self.poolComboBox.setGeometry(QRect(10, 24, 161, 22))
        self.poolComboBox.setEditable(False)
        self.groupBox_10 = QGroupBox(self.tab_7)
        self.groupBox_10.setObjectName(u"groupBox_10")
        self.groupBox_10.setGeometry(QRect(10, 14, 181, 141))
        self.groupBox_10.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.musicCheck = QCheckBox(self.groupBox_10)
        self.musicCheck.setObjectName(u"musicCheck")
        self.musicCheck.setEnabled(True)
        self.musicCheck.setGeometry(QRect(10, 64, 131, 21))
        self.musicCheck.setFont(font2)
        self.musicCheck.setCheckable(True)
        self.blurCheck = QCheckBox(self.groupBox_10)
        self.blurCheck.setObjectName(u"blurCheck")
        self.blurCheck.setGeometry(QRect(10, 24, 131, 21))
        self.groupBox_11 = QGroupBox(self.tab_7)
        self.groupBox_11.setObjectName(u"groupBox_11")
        self.groupBox_11.setGeometry(QRect(380, 14, 341, 101))
        self.groupBox_11.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.bossCutscenesCheck = QCheckBox(self.groupBox_11)
        self.bossCutscenesCheck.setObjectName(u"bossCutscenesCheck")
        self.bossCutscenesCheck.setEnabled(True)
        self.bossCutscenesCheck.setGeometry(QRect(10, 24, 151, 21))
        self.bossCutscenesCheck.setFont(font2)
        self.bossCutscenesCheck.setCheckable(True)
        self.songsCheck = QCheckBox(self.groupBox_11)
        self.songsCheck.setObjectName(u"songsCheck")
        self.songsCheck.setGeometry(QRect(10, 64, 151, 21))
        self.songsCheck.setFont(font2)
        self.songsCheck.setCheckable(True)
        self.chestAnimationsCheck = QCheckBox(self.groupBox_11)
        self.chestAnimationsCheck.setObjectName(u"chestAnimationsCheck")
        self.chestAnimationsCheck.setEnabled(True)
        self.chestAnimationsCheck.setGeometry(QRect(189, 24, 151, 21))
        self.chestAnimationsCheck.setFont(font2)
        self.chestAnimationsCheck.setCheckable(True)
        self.keyAnimationsCheck = QCheckBox(self.groupBox_11)
        self.keyAnimationsCheck.setObjectName(u"keyAnimationsCheck")
        self.keyAnimationsCheck.setEnabled(True)
        self.keyAnimationsCheck.setGeometry(QRect(189, 64, 151, 21))
        self.keyAnimationsCheck.setFont(font2)
        self.keyAnimationsCheck.setCheckable(True)
        self.groupBox_12 = QGroupBox(self.tab_7)
        self.groupBox_12.setObjectName(u"groupBox_12")
        self.groupBox_12.setGeometry(QRect(200, 170, 181, 101))
        self.groupBox_12.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.stealingCheck = QCheckBox(self.groupBox_12)
        self.stealingCheck.setObjectName(u"stealingCheck")
        self.stealingCheck.setGeometry(QRect(10, 24, 151, 21))
        self.stealingComboBox = QComboBox(self.groupBox_12)
        self.stealingComboBox.addItem("")
        self.stealingComboBox.addItem("")
        self.stealingComboBox.addItem("")
        self.stealingComboBox.setObjectName(u"stealingComboBox")
        self.stealingComboBox.setGeometry(QRect(10, 64, 161, 22))
        self.stealingComboBox.setEditable(False)
        self.groupBox_13 = QGroupBox(self.tab_7)
        self.groupBox_13.setObjectName(u"groupBox_13")
        self.groupBox_13.setGeometry(QRect(560, 120, 161, 101))
        self.groupBox_13.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.ohkoCheck = QCheckBox(self.groupBox_13)
        self.ohkoCheck.setObjectName(u"ohkoCheck")
        self.ohkoCheck.setGeometry(QRect(10, 24, 141, 21))
        self.perfectEndingCheck = QCheckBox(self.groupBox_13)
        self.perfectEndingCheck.setObjectName(u"perfectEndingCheck")
        self.perfectEndingCheck.setGeometry(QRect(10, 64, 151, 21))
        self.tabWidget_2.addTab(self.tab_7, "")
        self.tabWidget.addTab(self.tab, "")
        self.tabWidget_2.raise_()
        self.browseButton1.raise_()
        self.lineEdit.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.lineEdit_2.raise_()
        self.browseButton2.raise_()
        self.lineEdit_3.raise_()
        self.seedButton.raise_()
        self.label_3.raise_()
        self.tab_6 = QWidget()
        self.tab_6.setObjectName(u"tab_6")
        self.listWidget_5 = QListWidget(self.tab_6)
        self.listWidget_5.setObjectName(u"listWidget_5")
        self.listWidget_5.setGeometry(QRect(20, 41, 256, 411))
        self.listWidget_5.setFont(font)
        self.listWidget_5.setFrameShape(QFrame.StyledPanel)
        self.listWidget_5.setFrameShadow(QFrame.Sunken)
        self.listWidget_5.setAlternatingRowColors(False)
        self.listWidget_5.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_5.setUniformItemSizes(True)
        self.listWidget_5.setSortingEnabled(True)
        self.label_12 = QLabel(self.tab_6)
        self.label_12.setObjectName(u"label_12")
        self.label_12.setGeometry(QRect(20, 5, 256, 31))
        sizePolicy2.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy2)
        self.label_12.setMinimumSize(QSize(75, 23))
        font4 = QFont()
        font4.setPointSize(12)
        font4.setBold(False)
        font4.setItalic(False)
        self.label_12.setFont(font4)
        self.label_12.setFrameShape(QFrame.NoFrame)
        self.label_12.setFrameShadow(QFrame.Plain)
        self.label_12.setTextFormat(Qt.PlainText)
        self.label_12.setAlignment(Qt.AlignCenter)
        self.label_12.setWordWrap(False)
        self.includeButton_3 = QPushButton(self.tab_6)
        self.includeButton_3.setObjectName(u"includeButton_3")
        self.includeButton_3.setGeometry(QRect(325, 243, 101, 81))
        font5 = QFont()
        font5.setPointSize(11)
        font5.setBold(False)
        self.includeButton_3.setFont(font5)
        self.includeButton_3.setAutoFillBackground(False)
        self.includeButton_3.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.label_13 = QLabel(self.tab_6)
        self.label_13.setObjectName(u"label_13")
        self.label_13.setGeometry(QRect(475, 5, 256, 31))
        sizePolicy2.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy2)
        self.label_13.setMinimumSize(QSize(75, 23))
        self.label_13.setFont(font4)
        self.label_13.setFrameShape(QFrame.NoFrame)
        self.label_13.setFrameShadow(QFrame.Plain)
        self.label_13.setTextFormat(Qt.PlainText)
        self.label_13.setAlignment(Qt.AlignCenter)
        self.label_13.setWordWrap(False)
        self.excludeButton_3 = QPushButton(self.tab_6)
        self.excludeButton_3.setObjectName(u"excludeButton_3")
        self.excludeButton_3.setGeometry(QRect(325, 143, 101, 81))
        self.excludeButton_3.setFont(font5)
        self.excludeButton_3.setAutoFillBackground(False)
        self.excludeButton_3.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.listWidget_6 = QListWidget(self.tab_6)
        self.listWidget_6.setObjectName(u"listWidget_6")
        self.listWidget_6.setGeometry(QRect(475, 41, 256, 411))
        self.listWidget_6.setFont(font)
        self.listWidget_6.setAlternatingRowColors(False)
        self.listWidget_6.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_6.setUniformItemSizes(True)
        self.listWidget_6.setSortingEnabled(True)
        self.instrumentsComboBox = QComboBox(self.tab_6)
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.addItem("")
        self.instrumentsComboBox.setObjectName(u"instrumentsComboBox")
        self.instrumentsComboBox.setGeometry(QRect(290, 54, 171, 22))
        self.instrumentsComboBox.setEditable(False)
        self.rupeesSpinBox = QSpinBox(self.tab_6)
        self.rupeesSpinBox.setObjectName(u"rupeesSpinBox")
        self.rupeesSpinBox.setGeometry(QRect(310, 390, 131, 41))
        font6 = QFont()
        font6.setPointSize(10)
        self.rupeesSpinBox.setFont(font6)
        self.rupeesSpinBox.setMaximum(9999)
        self.rupeesSpinBox.setValue(0)
        self.dungeonItemsComboBox = QComboBox(self.tab_6)
        self.dungeonItemsComboBox.addItem("")
        self.dungeonItemsComboBox.addItem("")
        self.dungeonItemsComboBox.addItem("")
        self.dungeonItemsComboBox.addItem("")
        self.dungeonItemsComboBox.setObjectName(u"dungeonItemsComboBox")
        self.dungeonItemsComboBox.setGeometry(QRect(289, 94, 171, 22))
        self.dungeonItemsComboBox.setEditable(False)
        self.tabWidget.addTab(self.tab_6, "")
        self.tab_2 = QWidget()
        self.tab_2.setObjectName(u"tab_2")
        self.tab_2.setAutoFillBackground(False)
        self.label_7 = QLabel(self.tab_2)
        self.label_7.setObjectName(u"label_7")
        self.label_7.setGeometry(QRect(20, 5, 256, 31))
        sizePolicy2.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy2)
        self.label_7.setMinimumSize(QSize(75, 23))
        self.label_7.setFont(font4)
        self.label_7.setFrameShape(QFrame.NoFrame)
        self.label_7.setFrameShadow(QFrame.Plain)
        self.label_7.setTextFormat(Qt.PlainText)
        self.label_7.setAlignment(Qt.AlignCenter)
        self.label_7.setWordWrap(False)
        self.label_8 = QLabel(self.tab_2)
        self.label_8.setObjectName(u"label_8")
        self.label_8.setGeometry(QRect(475, 5, 256, 31))
        sizePolicy2.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy2)
        self.label_8.setMinimumSize(QSize(75, 23))
        self.label_8.setFont(font4)
        self.label_8.setFrameShape(QFrame.NoFrame)
        self.label_8.setFrameShadow(QFrame.Plain)
        self.label_8.setTextFormat(Qt.PlainText)
        self.label_8.setAlignment(Qt.AlignCenter)
        self.label_8.setWordWrap(False)
        self.excludeButton = QPushButton(self.tab_2)
        self.excludeButton.setObjectName(u"excludeButton")
        self.excludeButton.setGeometry(QRect(325, 143, 101, 81))
        self.excludeButton.setFont(font5)
        self.excludeButton.setAutoFillBackground(False)
        self.excludeButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.includeButton = QPushButton(self.tab_2)
        self.includeButton.setObjectName(u"includeButton")
        self.includeButton.setGeometry(QRect(325, 243, 101, 81))
        self.includeButton.setFont(font5)
        self.includeButton.setAutoFillBackground(False)
        self.includeButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.listWidget = QListWidget(self.tab_2)
        self.listWidget.setObjectName(u"listWidget")
        self.listWidget.setGeometry(QRect(20, 41, 256, 411))
        self.listWidget.setFont(font)
        self.listWidget.setFrameShape(QFrame.StyledPanel)
        self.listWidget.setFrameShadow(QFrame.Sunken)
        self.listWidget.setAlternatingRowColors(False)
        self.listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget.setUniformItemSizes(True)
        self.listWidget.setSortingEnabled(True)
        self.listWidget_2 = QListWidget(self.tab_2)
        self.listWidget_2.setObjectName(u"listWidget_2")
        self.listWidget_2.setGeometry(QRect(475, 41, 256, 411))
        self.listWidget_2.setFont(font)
        self.listWidget_2.setAlternatingRowColors(False)
        self.listWidget_2.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_2.setUniformItemSizes(True)
        self.listWidget_2.setSortingEnabled(True)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QWidget()
        self.tab_3.setObjectName(u"tab_3")
        self.listWidget_4 = QListWidget(self.tab_3)
        self.listWidget_4.setObjectName(u"listWidget_4")
        self.listWidget_4.setGeometry(QRect(475, 41, 256, 411))
        self.listWidget_4.setFont(font)
        self.listWidget_4.setAlternatingRowColors(False)
        self.listWidget_4.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_4.setUniformItemSizes(True)
        self.listWidget_4.setSortingEnabled(True)
        self.includeButton_2 = QPushButton(self.tab_3)
        self.includeButton_2.setObjectName(u"includeButton_2")
        self.includeButton_2.setGeometry(QRect(325, 243, 101, 81))
        self.includeButton_2.setFont(font5)
        self.includeButton_2.setAutoFillBackground(False)
        self.includeButton_2.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.excludeButton_2 = QPushButton(self.tab_3)
        self.excludeButton_2.setObjectName(u"excludeButton_2")
        self.excludeButton_2.setEnabled(True)
        self.excludeButton_2.setGeometry(QRect(325, 143, 101, 81))
        self.excludeButton_2.setFont(font5)
        self.excludeButton_2.setAutoFillBackground(False)
        self.excludeButton_2.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.listWidget_3 = QListWidget(self.tab_3)
        self.listWidget_3.setObjectName(u"listWidget_3")
        self.listWidget_3.setGeometry(QRect(20, 41, 256, 411))
        self.listWidget_3.setFont(font)
        self.listWidget_3.setFrameShape(QFrame.StyledPanel)
        self.listWidget_3.setFrameShadow(QFrame.Sunken)
        self.listWidget_3.setAlternatingRowColors(False)
        self.listWidget_3.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_3.setUniformItemSizes(True)
        self.listWidget_3.setSortingEnabled(True)
        self.label_9 = QLabel(self.tab_3)
        self.label_9.setObjectName(u"label_9")
        self.label_9.setGeometry(QRect(475, 5, 256, 31))
        sizePolicy2.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy2)
        self.label_9.setMinimumSize(QSize(75, 23))
        self.label_9.setFont(font4)
        self.label_9.setFrameShape(QFrame.NoFrame)
        self.label_9.setFrameShadow(QFrame.Plain)
        self.label_9.setTextFormat(Qt.PlainText)
        self.label_9.setAlignment(Qt.AlignCenter)
        self.label_9.setWordWrap(False)
        self.label_10 = QLabel(self.tab_3)
        self.label_10.setObjectName(u"label_10")
        self.label_10.setGeometry(QRect(20, 5, 256, 31))
        sizePolicy2.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy2)
        self.label_10.setMinimumSize(QSize(75, 23))
        self.label_10.setFont(font4)
        self.label_10.setFrameShape(QFrame.NoFrame)
        self.label_10.setFrameShadow(QFrame.Plain)
        self.label_10.setTextFormat(Qt.PlainText)
        self.label_10.setAlignment(Qt.AlignCenter)
        self.label_10.setWordWrap(False)
        self.tricksComboBox = QComboBox(self.tab_3)
        self.tricksComboBox.addItem("")
        self.tricksComboBox.addItem("")
        self.tricksComboBox.addItem("")
        self.tricksComboBox.addItem("")
        self.tricksComboBox.addItem("")
        self.tricksComboBox.setObjectName(u"tricksComboBox")
        self.tricksComboBox.setGeometry(QRect(288, 59, 171, 22))
        self.label_11 = QLabel(self.tab_3)
        self.label_11.setObjectName(u"label_11")
        self.label_11.setGeometry(QRect(295, 248, 161, 101))
        sizePolicy2.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy2)
        self.label_11.setMinimumSize(QSize(75, 23))
        font7 = QFont()
        font7.setPointSize(10)
        font7.setBold(False)
        font7.setItalic(False)
        self.label_11.setFont(font7)
        self.label_11.setFrameShape(QFrame.NoFrame)
        self.label_11.setFrameShadow(QFrame.Plain)
        self.label_11.setTextFormat(Qt.RichText)
        self.label_11.setAlignment(Qt.AlignHCenter|Qt.AlignTop)
        self.label_11.setWordWrap(True)
        self.tabWidget.addTab(self.tab_3, "")
        self.randomizeButton = QPushButton(self.centralwidget)
        self.randomizeButton.setObjectName(u"randomizeButton")
        self.randomizeButton.setGeometry(QRect(683, 590, 75, 23))
        self.randomizeButton.setFont(font1)
        self.randomizeButton.setAutoFillBackground(False)
        self.randomizeButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.randomizeButton.setFlat(False)
        self.copyButton = QPushButton(self.centralwidget)
        self.copyButton.setObjectName(u"copyButton")
        self.copyButton.setGeometry(QRect(20, 590, 91, 23))
        self.copyButton.setFont(font1)
        self.copyButton.setAutoFillBackground(False)
        self.copyButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.copyButton.setFlat(False)
        self.explainationLabel = QLabel(self.centralwidget)
        self.explainationLabel.setObjectName(u"explainationLabel")
        self.explainationLabel.setGeometry(QRect(30, 519, 711, 31))
        sizePolicy2.setHeightForWidth(self.explainationLabel.sizePolicy().hasHeightForWidth())
        self.explainationLabel.setSizePolicy(sizePolicy2)
        self.explainationLabel.setMinimumSize(QSize(75, 23))
        self.explainationLabel.setFont(font1)
        self.explainationLabel.setStyleSheet(u"color: rgb(80, 80, 80);")
        self.explainationLabel.setFrameShape(QFrame.NoFrame)
        self.explainationLabel.setFrameShadow(QFrame.Plain)
        self.explainationLabel.setTextFormat(Qt.RichText)
        self.explainationLabel.setAlignment(Qt.AlignLeading|Qt.AlignLeft|Qt.AlignTop)
        self.explainationLabel.setWordWrap(False)
        self.lineEdit_4 = QLineEdit(self.centralwidget)
        self.lineEdit_4.setObjectName(u"lineEdit_4")
        self.lineEdit_4.setEnabled(True)
        self.lineEdit_4.setGeometry(QRect(20, 560, 741, 23))
        self.lineEdit_4.setFont(font1)
        self.lineEdit_4.setReadOnly(True)
        self.resetButton = QPushButton(self.centralwidget)
        self.resetButton.setObjectName(u"resetButton")
        self.resetButton.setGeometry(QRect(220, 590, 91, 23))
        self.resetButton.setFont(font1)
        self.resetButton.setAutoFillBackground(False)
        self.resetButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.resetButton.setFlat(False)
        self.pasteButton = QPushButton(self.centralwidget)
        self.pasteButton.setObjectName(u"pasteButton")
        self.pasteButton.setGeometry(QRect(120, 590, 91, 23))
        self.pasteButton.setFont(font1)
        self.pasteButton.setAutoFillBackground(False)
        self.pasteButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.pasteButton.setFlat(False)
        self.randomizeSettingsButton = QPushButton(self.centralwidget)
        self.randomizeSettingsButton.setObjectName(u"randomizeSettingsButton")
        self.randomizeSettingsButton.setGeometry(QRect(320, 590, 121, 23))
        self.randomizeSettingsButton.setFont(font1)
        self.randomizeSettingsButton.setAutoFillBackground(False)
        self.randomizeSettingsButton.setStyleSheet(u"background-color: rgb(218, 218, 218);")
        self.randomizeSettingsButton.setFlat(False)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QMenuBar(MainWindow)
        self.menuBar.setObjectName(u"menuBar")
        self.menuBar.setGeometry(QRect(0, 0, 780, 22))
        self.menuLanguage = QMenu(self.menuBar)
        self.menuLanguage.setObjectName(u"menuLanguage")
        self.menuLanguage.setEnabled(False)
        self.menuAbout = QMenu(self.menuBar)
        self.menuAbout.setObjectName(u"menuAbout")
        self.menuTheme = QMenu(self.menuBar)
        self.menuTheme.setObjectName(u"menuTheme")
        MainWindow.setMenuBar(self.menuBar)

        self.menuBar.addAction(self.menuLanguage.menuAction())
        self.menuBar.addAction(self.menuTheme.menuAction())
        self.menuBar.addAction(self.menuAbout.menuAction())
        self.menuLanguage.addAction(self.actionEnglish)
        self.menuLanguage.addSeparator()
        self.menuLanguage.addAction(self.actionfran_ais)
        self.menuLanguage.addSeparator()
        self.menuLanguage.addAction(self.action)
        self.menuAbout.addAction(self.actionChangelog)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.actionKnown_Issues)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.actionHelpful_Tips)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.actionHelp)
        self.menuTheme.addAction(self.actionLight)
        self.menuTheme.addSeparator()
        self.menuTheme.addAction(self.actionDark)

        self.retranslateUi(MainWindow)

        self.tabWidget.setCurrentIndex(0)
        self.browseButton1.setDefault(False)
        self.browseButton2.setDefault(False)
        self.seedButton.setDefault(False)
        self.tabWidget_2.setCurrentIndex(0)
        self.seashellsComboBox.setCurrentIndex(0)
        self.owlsComboBox.setCurrentIndex(0)
        self.itemsComboBox.setCurrentIndex(0)
        self.platformComboBox.setCurrentIndex(0)
        self.chestAspectComboBox.setCurrentIndex(0)
        self.trapsComboBox.setCurrentIndex(0)
        self.poolComboBox.setCurrentIndex(1)
        self.stealingComboBox.setCurrentIndex(2)
        self.instrumentsComboBox.setCurrentIndex(0)
        self.dungeonItemsComboBox.setCurrentIndex(0)
        self.tricksComboBox.setCurrentIndex(0)
        self.randomizeButton.setDefault(False)
        self.copyButton.setDefault(False)
        self.resetButton.setDefault(False)
        self.pasteButton.setDefault(False)
        self.randomizeSettingsButton.setDefault(False)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Link's Awakening Switch Randomizer", None))
        self.actionEnglish.setText(QCoreApplication.translate("MainWindow", u"English", None))
        self.actionfran_ais.setText(QCoreApplication.translate("MainWindow", u"Fran\u00e7ais", None))
        self.action.setText(QCoreApplication.translate("MainWindow", u"\u4e2d\u6587", None))
        self.actionLight.setText(QCoreApplication.translate("MainWindow", u"Light", None))
        self.actionDark.setText(QCoreApplication.translate("MainWindow", u"Dark", None))
        self.actionChangelog.setText(QCoreApplication.translate("MainWindow", u"What's New", None))
        self.actionHelp.setText(QCoreApplication.translate("MainWindow", u"Help", None))
        self.actionKnown_Issues.setText(QCoreApplication.translate("MainWindow", u"Known Issues", None))
        self.actionUpdate.setText(QCoreApplication.translate("MainWindow", u"Update Logic", None))
        self.actionExport.setText(QCoreApplication.translate("MainWindow", u"Export Logic", None))
        self.actionHelpful_Tips.setText(QCoreApplication.translate("MainWindow", u"Useful Info", None))
        self.browseButton1.setText(QCoreApplication.translate("MainWindow", u"Browse", None))
        self.lineEdit.setText("")
        self.label.setText(QCoreApplication.translate("MainWindow", u"Romfs Path", None))
        self.label_2.setText(QCoreApplication.translate("MainWindow", u"Output Folder", None))
        self.browseButton2.setText(QCoreApplication.translate("MainWindow", u"Browse", None))
        self.seedButton.setText(QCoreApplication.translate("MainWindow", u"New Seed", None))
        self.label_3.setText(QCoreApplication.translate("MainWindow", u"Optional Seed", None))
        self.groupBox.setTitle(QCoreApplication.translate("MainWindow", u"Main Checks", None))
#if QT_CONFIG(tooltip)
        self.chestsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.chestsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether chests found in the overworld and caves can contain progress items<br></br><u>If this is not checked, they will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.chestsCheck.setText(QCoreApplication.translate("MainWindow", u"Chests", None))
#if QT_CONFIG(tooltip)
        self.giftsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.giftsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether free gifts from NPCs can be progress items<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.giftsCheck.setText(QCoreApplication.translate("MainWindow", u"Free Gifts", None))
#if QT_CONFIG(tooltip)
        self.tradeGiftsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.tradeGiftsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the trading quest can contain progress items<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.tradeGiftsCheck.setText(QCoreApplication.translate("MainWindow", u"Trade Quest", None))
#if QT_CONFIG(whatsthis)
        self.seashellsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether seashells can be progress items<br></br><u>Not yet implemented</u>", None))
#endif // QT_CONFIG(whatsthis)
        self.seashellsCheck.setText(QCoreApplication.translate("MainWindow", u"Seashells", None))
#if QT_CONFIG(tooltip)
        self.shopCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.shopCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the shop can sell progress items<br></br><u>Not yet implemented</u>", None))
#endif // QT_CONFIG(whatsthis)
        self.shopCheck.setText(QCoreApplication.translate("MainWindow", u"Shop", None))
#if QT_CONFIG(whatsthis)
        self.leavesCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the Golden Leaves can be progress items<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.leavesCheck.setText(QCoreApplication.translate("MainWindow", u"Golden Leaves", None))
#if QT_CONFIG(whatsthis)
        self.miscellaneousCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether miscellaneous items can be progress items<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.miscellaneousCheck.setText(QCoreApplication.translate("MainWindow", u"Miscellaneous", None))
#if QT_CONFIG(tooltip)
        self.heartsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.heartsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether standing heart pieces can be progress items. Sunken ones are currently left as vanilla<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.heartsCheck.setText(QCoreApplication.translate("MainWindow", u"Heart Pieces", None))
        self.seashellsComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Seashell Mansion:  0", None))
        self.seashellsComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Seashell Mansion:  5", None))
        self.seashellsComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Seashell Mansion:  15", None))
        self.seashellsComboBox.setItemText(3, QCoreApplication.translate("MainWindow", u"Seashell Mansion:  30", None))
        self.seashellsComboBox.setItemText(4, QCoreApplication.translate("MainWindow", u"Seashell Mansion:  40", None))
        self.seashellsComboBox.setItemText(5, QCoreApplication.translate("MainWindow", u"Seashell Mansion:  50", None))

#if QT_CONFIG(whatsthis)
        self.seashellsComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls the maximum number of seashells to be considered in logic for the Seashell Mansion prizes", None))
#endif // QT_CONFIG(whatsthis)
        self.seashellsComboBox.setPlaceholderText("")
        self.groupBox_2.setTitle(QCoreApplication.translate("MainWindow", u"Dungeons", None))
#if QT_CONFIG(tooltip)
        self.instrumentCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.instrumentCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether instruments will be randomized<br></br><u>If this is not checked, it will not be randomized,</u> except for the instruments you start with", None))
#endif // QT_CONFIG(whatsthis)
        self.instrumentCheck.setText(QCoreApplication.translate("MainWindow", u"Instruments", None))
#if QT_CONFIG(tooltip)
        self.bossCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.bossCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether bosses can drop progress items. This includes non dungeon bosses<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.bossCheck.setText(QCoreApplication.translate("MainWindow", u"Boss Drops", None))
#if QT_CONFIG(tooltip)
        self.rupCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.rupCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Turns the 28 freestanding rupees in Color Dungeon into item checks<br></br><u>If this is not checked</u>, they will stay as rupees", None))
#endif // QT_CONFIG(whatsthis)
        self.rupCheck.setText(QCoreApplication.translate("MainWindow", u"Blupsanity", None))
        self.owlsComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Owl Gifts: None", None))
        self.owlsComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Owl Gifts: Overworld", None))
        self.owlsComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Owl Gifts: Dungeons", None))
        self.owlsComboBox.setItemText(3, QCoreApplication.translate("MainWindow", u"Owl Gifts: All", None))

#if QT_CONFIG(whatsthis)
        self.owlsComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This determines if Owl Statues will give items or not", None))
#endif // QT_CONFIG(whatsthis)
        self.itemsComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Items: Standard", None))
        self.itemsComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Items: Keysanity", None))
        self.itemsComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Items: Keysanity + MCB", None))

#if QT_CONFIG(whatsthis)
        self.itemsComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This determines what dungeon items can be shuffled outside of their own dungeons", None))
#endif // QT_CONFIG(whatsthis)
        self.groupBox_3.setTitle(QCoreApplication.translate("MainWindow", u"Mini Games", None))
#if QT_CONFIG(tooltip)
        self.dampeCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.dampeCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the Damp\u00e9 prizes can be progress items<br></br><u>The logic does not work with instrument shuffle,</u> and may result in unbeatable seeds", None))
#endif // QT_CONFIG(whatsthis)
        self.dampeCheck.setText(QCoreApplication.translate("MainWindow", u"Damp\u00e9", None))
#if QT_CONFIG(tooltip)
        self.fishingCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.fishingCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the Mabe Fishing prizes can be progress items<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.fishingCheck.setText(QCoreApplication.translate("MainWindow", u"Fishing", None))
#if QT_CONFIG(tooltip)
        self.rapidsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.rapidsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the Rapids Race prizes as well as the items inside can be progress items<br></br><u>If this is not checked, it will still be randomized,</u> but will only contain optional items", None))
#endif // QT_CONFIG(whatsthis)
        self.rapidsCheck.setText(QCoreApplication.translate("MainWindow", u"Rapids", None))
#if QT_CONFIG(tooltip)
        self.trendyCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.trendyCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls whether the Trendy Game can contain progress items<br></br><u>Not yet implemented</u>", None))
#endif // QT_CONFIG(whatsthis)
        self.trendyCheck.setText(QCoreApplication.translate("MainWindow", u"Trendy Game", None))
        self.groupBox_4.setTitle(QCoreApplication.translate("MainWindow", u"Output Settings", None))
#if QT_CONFIG(tooltip)
        self.spoilerCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.spoilerCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Creates a spoiler log in case you get stuck", None))
#endif // QT_CONFIG(whatsthis)
        self.spoilerCheck.setText(QCoreApplication.translate("MainWindow", u"Create Spoiler Log", None))
        self.platformComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Platform: Console", None))
        self.platformComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Platform: Emulator", None))

#if QT_CONFIG(whatsthis)
        self.platformComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This sets the output according to the platform that the user is playing on", None))
#endif // QT_CONFIG(whatsthis)
        self.platformComboBox.setPlaceholderText("")
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_4), QCoreApplication.translate("MainWindow", u"Main Settings", None))
        self.groupBox_6.setTitle(QCoreApplication.translate("MainWindow", u"Global", None))
#if QT_CONFIG(tooltip)
        self.enemyCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.enemyCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Randomizes enemies. Required kills are left vanilla", None))
#endif // QT_CONFIG(whatsthis)
        self.enemyCheck.setText(QCoreApplication.translate("MainWindow", u"Randomize Enemies", None))
#if QT_CONFIG(tooltip)
        self.enemySizesCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.enemySizesCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Randomizes the size of the enemies between 50% and 150%", None))
#endif // QT_CONFIG(whatsthis)
        self.enemySizesCheck.setText(QCoreApplication.translate("MainWindow", u"Randomize Enemy Sizes", None))
        self.chestAspectComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Chests : Default", None))
        self.chestAspectComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Chests : Size", None))
        self.chestAspectComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Chests : Texture & Size", None))

#if QT_CONFIG(whatsthis)
        self.chestAspectComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"Setup the way chests appear in game (With a custom size and/or texture depending on its content)", None))
#endif // QT_CONFIG(whatsthis)
        self.chestAspectComboBox.setPlaceholderText("")
        self.groupBox_5.setTitle(QCoreApplication.translate("MainWindow", u"Logic Options", None))
#if QT_CONFIG(tooltip)
        self.badPetsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.badPetsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Companions will follow you into dungeons<br></br>The logic for the setting is in the experimental stages, beware", None))
#endif // QT_CONFIG(whatsthis)
        self.badPetsCheck.setText(QCoreApplication.translate("MainWindow", u"Bad Pets", None))
#if QT_CONFIG(tooltip)
        self.unlockedBombsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.unlockedBombsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Bombs can be bought from the shop at the start, otherwise needs Conch Horn", None))
#endif // QT_CONFIG(whatsthis)
        self.unlockedBombsCheck.setText(QCoreApplication.translate("MainWindow", u"Unlocked Bombs", None))
#if QT_CONFIG(tooltip)
        self.shuffledBombsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.shuffledBombsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"You need to find your bombs before you can obtain any from other means<br></br>This overrides Unlocked Bombs", None))
#endif // QT_CONFIG(whatsthis)
        self.shuffledBombsCheck.setText(QCoreApplication.translate("MainWindow", u"Shuffled Bombs", None))
#if QT_CONFIG(tooltip)
        self.shuffledPowderCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.shuffledPowderCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"You need to find your Powder before you can obtain any from other means", None))
#endif // QT_CONFIG(whatsthis)
        self.shuffledPowderCheck.setText(QCoreApplication.translate("MainWindow", u"Shuffled Powder", None))
#if QT_CONFIG(tooltip)
        self.fastFishingCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.fastFishingCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Removes all instrument requirements from the fishing minigame", None))
#endif // QT_CONFIG(whatsthis)
        self.fastFishingCheck.setText(QCoreApplication.translate("MainWindow", u"Fast Fishing", None))
#if QT_CONFIG(tooltip)
        self.stalfosCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.stalfosCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Makes it so that you only need to fight the last iteration of Master Stalfos", None))
#endif // QT_CONFIG(whatsthis)
        self.stalfosCheck.setText(QCoreApplication.translate("MainWindow", u"Fast Stalfos", None))
#if QT_CONFIG(tooltip)
        self.bookCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.bookCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Removes needing the lens to read The Book of Dark Secrets", None))
#endif // QT_CONFIG(whatsthis)
        self.bookCheck.setText(QCoreApplication.translate("MainWindow", u"Free Book", None))
        self.groupBox_9.setTitle(QCoreApplication.translate("MainWindow", u"Overworld", None))
#if QT_CONFIG(tooltip)
        self.kanaletCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.kanaletCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Sets the Kanalet Gate to be open from the start", None))
#endif // QT_CONFIG(whatsthis)
        self.kanaletCheck.setText(QCoreApplication.translate("MainWindow", u"Open Kanalet", None))
#if QT_CONFIG(tooltip)
        self.openMabeCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.openMabeCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Opens all Mabe Village exits (Beach, Plains, Woods)", None))
#endif // QT_CONFIG(whatsthis)
        self.openMabeCheck.setText(QCoreApplication.translate("MainWindow", u"Open Mabe", None))
#if QT_CONFIG(tooltip)
        self.mazeCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.mazeCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Sets the Sign Maze to be automatically completed", None))
#endif // QT_CONFIG(whatsthis)
        self.mazeCheck.setText(QCoreApplication.translate("MainWindow", u"Open Mamu", None))
#if QT_CONFIG(tooltip)
        self.bridgeCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.bridgeCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Sets the Kanalet bridge to be built from the start", None))
#endif // QT_CONFIG(whatsthis)
        self.bridgeCheck.setText(QCoreApplication.translate("MainWindow", u"Completed Bridge", None))
#if QT_CONFIG(tooltip)
        self.swampCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.swampCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Turns the rock in front of Dungeon 2 into a flower", None))
#endif // QT_CONFIG(whatsthis)
        self.swampCheck.setText(QCoreApplication.translate("MainWindow", u"Classic D2", None))
#if QT_CONFIG(tooltip)
        self.extendedConsumableCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.extendedConsumableCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Allows grass to drop arrows, bombs and powder", None))
#endif // QT_CONFIG(whatsthis)
        self.extendedConsumableCheck.setText(QCoreApplication.translate("MainWindow", u"Extra consumable drop", None))
#if QT_CONFIG(tooltip)
        self.dungeonsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.dungeonsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Randomizes Dungeons<br></br><u>Only front entrances are randomized,</u> and only handles non-glitched logics", None))
#endif // QT_CONFIG(whatsthis)
        self.dungeonsCheck.setText(QCoreApplication.translate("MainWindow", u"Shuffled Dungeons", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_5), QCoreApplication.translate("MainWindow", u"World Settings", None))
        self.groupBox_8.setTitle(QCoreApplication.translate("MainWindow", u"Nice Items", None))
#if QT_CONFIG(whatsthis)
        self.lv1BeamCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Allows you to beam slash with the Lv1 Sword. Still requires full health", None))
#endif // QT_CONFIG(whatsthis)
        self.lv1BeamCheck.setText(QCoreApplication.translate("MainWindow", u"Sword Beam With Lv1", None))
#if QT_CONFIG(whatsthis)
        self.niceRodCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Removes the cooldown on the Magic Rod, resulting in a greater firing rate", None))
#endif // QT_CONFIG(whatsthis)
        self.niceRodCheck.setText(QCoreApplication.translate("MainWindow", u"Nice Magic Rod", None))
#if QT_CONFIG(whatsthis)
        self.niceBombsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Allows you to rapidly place down bombs with no cooldown", None))
#endif // QT_CONFIG(whatsthis)
        self.niceBombsCheck.setText(QCoreApplication.translate("MainWindow", u"Nice Bombs", None))
        self.groupBox_7.setTitle(QCoreApplication.translate("MainWindow", u"Item Pool", None))
        self.trapsComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Traps: None", None))
        self.trapsComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Traps: Few", None))
        self.trapsComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Traps: Several", None))
        self.trapsComboBox.setItemText(3, QCoreApplication.translate("MainWindow", u"Traps: Many", None))
        self.trapsComboBox.setItemText(4, QCoreApplication.translate("MainWindow", u"Traps: Trapsanity", None))

#if QT_CONFIG(whatsthis)
        self.trapsComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls how many custom traps get added to the item pool", None))
#endif // QT_CONFIG(whatsthis)
        self.trapsComboBox.setPlaceholderText("")
        self.poolComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Item Pool: Plentiful", None))
        self.poolComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Item Pool: Standard", None))
        self.poolComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Item Pool: Reduced", None))

#if QT_CONFIG(whatsthis)
        self.poolComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls what items can be found in the randomizer", None))
#endif // QT_CONFIG(whatsthis)
        self.poolComboBox.setPlaceholderText("")
        self.groupBox_10.setTitle(QCoreApplication.translate("MainWindow", u"Cosmetics", None))
#if QT_CONFIG(tooltip)
        self.musicCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.musicCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Randomizes music", None))
#endif // QT_CONFIG(whatsthis)
        self.musicCheck.setText(QCoreApplication.translate("MainWindow", u"Randomize Music", None))
#if QT_CONFIG(whatsthis)
        self.blurCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Removes the blur around the edges of the screen", None))
#endif // QT_CONFIG(whatsthis)
        self.blurCheck.setText(QCoreApplication.translate("MainWindow", u"Blur Removal", None))
        self.groupBox_11.setTitle(QCoreApplication.translate("MainWindow", u"Speed Options", None))
#if QT_CONFIG(tooltip)
        self.bossCutscenesCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.bossCutscenesCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Sets all boss cutscenes to have already been watched", None))
#endif // QT_CONFIG(whatsthis)
        self.bossCutscenesCheck.setText(QCoreApplication.translate("MainWindow", u"Boss Cutscenes", None))
#if QT_CONFIG(tooltip)
        self.songsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.songsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Skips the song learning animations and instead just immediately gives the item", None))
#endif // QT_CONFIG(whatsthis)
        self.songsCheck.setText(QCoreApplication.translate("MainWindow", u"Song Cutscenes", None))
#if QT_CONFIG(tooltip)
        self.chestAnimationsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.chestAnimationsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Speeds up the animation when a chest appears", None))
#endif // QT_CONFIG(whatsthis)
        self.chestAnimationsCheck.setText(QCoreApplication.translate("MainWindow", u"Chest Animations", None))
#if QT_CONFIG(tooltip)
        self.keyAnimationsCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.keyAnimationsCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Speeds up the animation when keys drop from the ceiling", None))
#endif // QT_CONFIG(whatsthis)
        self.keyAnimationsCheck.setText(QCoreApplication.translate("MainWindow", u"Key Animations", None))
        self.groupBox_12.setTitle(QCoreApplication.translate("MainWindow", u"Shop", None))
#if QT_CONFIG(tooltip)
        self.stealingCheck.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.stealingCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"The shopkeeper will not kill you after stealing", None))
#endif // QT_CONFIG(whatsthis)
        self.stealingCheck.setText(QCoreApplication.translate("MainWindow", u"Fast Stealing", None))
        self.stealingComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Stealing: Always", None))
        self.stealingComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Stealing: Never", None))
        self.stealingComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Stealing: Normal", None))

#if QT_CONFIG(whatsthis)
        self.stealingComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls the requirement for stealing from the shop<br></br>Normal means that Sword is required", None))
#endif // QT_CONFIG(whatsthis)
        self.stealingComboBox.setPlaceholderText("")
        self.groupBox_13.setTitle(QCoreApplication.translate("MainWindow", u"Other", None))
#if QT_CONFIG(whatsthis)
        self.ohkoCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Link will die in a single hit", None))
#endif // QT_CONFIG(whatsthis)
        self.ohkoCheck.setText(QCoreApplication.translate("MainWindow", u"One Hit KO Mode", None))
#if QT_CONFIG(whatsthis)
        self.perfectEndingCheck.setWhatsThis(QCoreApplication.translate("MainWindow", u"Forces the perfect ending to be displayed at the end of the game.<br><b><u>WARNING : Disables the death counter</u></b>", None))
#endif // QT_CONFIG(whatsthis)
        self.perfectEndingCheck.setText(QCoreApplication.translate("MainWindow", u"Perfect Ending", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_7), QCoreApplication.translate("MainWindow", u"Extra Settings", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), QCoreApplication.translate("MainWindow", u"Randomizer Settings", None))
        self.label_12.setText(QCoreApplication.translate("MainWindow", u"Randomized Items", None))
        self.includeButton_3.setText(QCoreApplication.translate("MainWindow", u"<-", None))
        self.label_13.setText(QCoreApplication.translate("MainWindow", u"Starting Items", None))
        self.excludeButton_3.setText(QCoreApplication.translate("MainWindow", u"->", None))
        self.instrumentsComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Starting Instruments:  0", None))
        self.instrumentsComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Starting Instruments:  1", None))
        self.instrumentsComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Starting Instruments:  2", None))
        self.instrumentsComboBox.setItemText(3, QCoreApplication.translate("MainWindow", u"Starting Instruments:  3", None))
        self.instrumentsComboBox.setItemText(4, QCoreApplication.translate("MainWindow", u"Starting Instruments:  4", None))
        self.instrumentsComboBox.setItemText(5, QCoreApplication.translate("MainWindow", u"Starting Instruments:  5", None))
        self.instrumentsComboBox.setItemText(6, QCoreApplication.translate("MainWindow", u"Starting Instruments:  6", None))
        self.instrumentsComboBox.setItemText(7, QCoreApplication.translate("MainWindow", u"Starting Instruments:  7", None))
        self.instrumentsComboBox.setItemText(8, QCoreApplication.translate("MainWindow", u"Starting Instruments:  8", None))

#if QT_CONFIG(whatsthis)
        self.instrumentsComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This lets you choose a number of random instruments to start with<br></br>Manually selected instruments will be placed in the random selection", None))
#endif // QT_CONFIG(whatsthis)
        self.instrumentsComboBox.setPlaceholderText("")
#if QT_CONFIG(whatsthis)
        self.rupeesSpinBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This lets you choose how many rupees to start with", None))
#endif // QT_CONFIG(whatsthis)
        self.rupeesSpinBox.setSuffix("")
        self.rupeesSpinBox.setPrefix(QCoreApplication.translate("MainWindow", u"Rupees:  ", None))
        self.dungeonItemsComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Dungeon Items : None", None))
        self.dungeonItemsComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Dungeon Items : Beaks", None))
        self.dungeonItemsComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Dungeon Items : MC", None))
        self.dungeonItemsComboBox.setItemText(3, QCoreApplication.translate("MainWindow", u"Dungeon Items : MCB", None))

#if QT_CONFIG(whatsthis)
        self.dungeonItemsComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This will set the dungeon items already rewarded at the beginning of the seed<br>MC = Maps & Compass, MCB = Maps, Compass & Beaks", None))
#endif // QT_CONFIG(whatsthis)
        self.dungeonItemsComboBox.setPlaceholderText("")
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), QCoreApplication.translate("MainWindow", u"Starting Items", None))
        self.label_7.setText(QCoreApplication.translate("MainWindow", u"Included Checks", None))
        self.label_8.setText(QCoreApplication.translate("MainWindow", u"Excluded Checks", None))
        self.excludeButton.setText(QCoreApplication.translate("MainWindow", u"->", None))
        self.includeButton.setText(QCoreApplication.translate("MainWindow", u"<-", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), QCoreApplication.translate("MainWindow", u"Locations", None))
        self.includeButton_2.setText(QCoreApplication.translate("MainWindow", u"<-", None))
        self.excludeButton_2.setText(QCoreApplication.translate("MainWindow", u"->", None))
        self.label_9.setText(QCoreApplication.translate("MainWindow", u"Excluded Tricks", None))
        self.label_10.setText(QCoreApplication.translate("MainWindow", u"Included Tricks", None))
        self.tricksComboBox.setItemText(0, QCoreApplication.translate("MainWindow", u"Logic:  Basic", None))
        self.tricksComboBox.setItemText(1, QCoreApplication.translate("MainWindow", u"Logic:  Advanced", None))
        self.tricksComboBox.setItemText(2, QCoreApplication.translate("MainWindow", u"Logic:  Glitched", None))
        self.tricksComboBox.setItemText(3, QCoreApplication.translate("MainWindow", u"Logic:  Hell", None))
        self.tricksComboBox.setItemText(4, QCoreApplication.translate("MainWindow", u"Logic:  None", None))

#if QT_CONFIG(whatsthis)
        self.tricksComboBox.setWhatsThis(QCoreApplication.translate("MainWindow", u"This controls what logic preset to use", None))
#endif // QT_CONFIG(whatsthis)
        self.label_11.setText(QCoreApplication.translate("MainWindow", u"You cannot yet choose<br></br>individual tricks<br></br><br></br>Refer to the README for info on the current logic", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), QCoreApplication.translate("MainWindow", u"Logic", None))
        self.randomizeButton.setText(QCoreApplication.translate("MainWindow", u"Randomize", None))
        self.copyButton.setText(QCoreApplication.translate("MainWindow", u"Copy Settings", None))
        self.explainationLabel.setText(QCoreApplication.translate("MainWindow", u"Hover over an option to see what it does", None))
        self.resetButton.setText(QCoreApplication.translate("MainWindow", u"Reset Settings", None))
        self.pasteButton.setText(QCoreApplication.translate("MainWindow", u"Paste Settings", None))
        self.randomizeSettingsButton.setText(QCoreApplication.translate("MainWindow", u"Randomize Settings", None))
        self.menuLanguage.setTitle(QCoreApplication.translate("MainWindow", u"Language", None))
        self.menuAbout.setTitle(QCoreApplication.translate("MainWindow", u"About", None))
        self.menuTheme.setTitle(QCoreApplication.translate("MainWindow", u"Theme", None))
    # retranslateUi

